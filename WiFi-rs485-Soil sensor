#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ModbusMaster.h>
#include <SoftwareSerial.h>

// ================== WiFi and MQTT ==================
const char* ssid = "NOKIA-9A21";
const char* password = "59vtvyRpBq";
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;
const char* device = "555555"; // Device ID
const char* org_name = "chellam";

WiFiClient espClient;
PubSubClient client(espClient);

// ================== Modbus Setup ==================
#define RX_PIN 12 // D6
#define TX_PIN 13 // D7
SoftwareSerial modbusSerial(RX_PIN, TX_PIN); // RX, TX
ModbusMaster node;

void preTransmission() {
  digitalWrite(LED_BUILTIN, HIGH);
}
void postTransmission() {
  digitalWrite(LED_BUILTIN, LOW);
}

// ================== Setup WiFi ==================
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// ================== MQTT Callback ==================
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (unsigned int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

// ================== MQTT Reconnect ==================
void reconnect() {
  int retryCount = 0;
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      retryCount++;
      if (retryCount > 5) {
        Serial.println("Failed to connect after multiple attempts.");
        break;
      }
      delay(5000);
    }
  }
}

// ================== Setup ==================
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  modbusSerial.begin(4800);
  node.begin(1, modbusSerial);
  node.preTransmission(preTransmission);
  node.postTransmission(postTransmission);
}

// ================== Loop ==================
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  static unsigned long lastPublishTime = 0;
  unsigned long currentMillis = millis();

  // Publish every 2 minutes
  if (currentMillis - lastPublishTime >= 120000) {
    lastPublishTime = currentMillis;

    uint8_t result = node.readInputRegisters(0x0000, 7); // Read 7 input registers
    if (result == node.ku8MBSuccess) {
      uint16_t moisture = node.getResponseBuffer(0);
      int16_t temperature = (int16_t)node.getResponseBuffer(1);
      uint16_t ec = node.getResponseBuffer(2);
      float ph = node.getResponseBuffer(3) / 10.0;
      uint16_t nitrogen = node.getResponseBuffer(4);
      uint16_t phosphorus = node.getResponseBuffer(5);
      uint16_t potassium = node.getResponseBuffer(6);

      StaticJsonDocument<256> doc;
      doc["Device_ID"] = device;
      doc["org_name"] = org_name;
      doc["Moisture"] = moisture;
      doc["Temperature"] = temperature;
      doc["EC"] = ec;
      doc["pH"] = ph;
      doc["Nitrogen"] = nitrogen;
      doc["Phosphorus"] = phosphorus;
      doc["Potassium"] = potassium;

      char jsonBuffer[256];
      serializeJson(doc, jsonBuffer);

      client.publish("chellam/aws/555555", jsonBuffer);
      Serial.println("Published to MQTT:");
      Serial.println(jsonBuffer);
    } else {
      Serial.print("Modbus Read Error: ");
      Serial.println(result);
    }
  }
}
